---
apiVersion: template.openshift.io/v1
kind: Template
metadata:
  annotations:
    description: Anarchy deploy
  name: anarchy-deploy

parameters:
- name: NAME
  description: Name for Anarchy resources
  displayName: Name
  value: anarchy
- name: ANARCHY_DOMAIN
  description: Anarchy operator custom resource definition domain
  displayName: Anarchy operator CRD domain
  value: anarchy.gpte.redhat.com
- name: ANARCHY_IMAGE
  value: quay.io/redhat-cop/anarchy:v0.8.0
- name: ANARCHY_IMAGE_PULL_POLICY
  value: IfNotPresent
- name: ANARCHY_REPLICAS
  value: '1'
- name: LOGGING_LEVEL
  description: "Logging level: DEBUG, INFO, WARNING"
  value: INFO
- name: RUNNER_IMAGE
  value: ''
- name: RUNNER_IMAGE_PULL_POLICY
  value: IfNotPresent
  #value: Always

objects:
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: ${NAME}

- apiVersion: rbac.authorization.k8s.io/v1
  kind: RoleBinding
  metadata:
    name: ${NAME}
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: anarchy
  subjects:
  - kind: ServiceAccount
    name: ${NAME}

- apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: ${NAME}
  spec:
    replicas: ${{ANARCHY_REPLICAS}}
    selector:
      matchLabels:
        name: ${NAME}
    strategy:
      type: RollingUpdate
    template:
      metadata:
        labels:
          name: ${NAME}
      spec:
        containers:
        - name: manager
          env:
          - name: ANARCHY_DOMAIN
            value: ${ANARCHY_DOMAIN}
          - name: ANARCHY_SERVICE
            value: ${NAME}
          - name: RUNNER_IMAGE
            value: ${RUNNER_IMAGE}
          - name: RUNNER_IMAGE_PULL_POLICY
            value: ${RUNNER_IMAGE_PULL_POLICY}
          - name: LOGGING_LEVEL
            value: ${LOGGING_LEVEL}
          image: ${ANARCHY_IMAGE}
          imagePullPolicy: ${ANARCHY_IMAGE_PULL_POLICY}
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8080
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        restartPolicy: Always
        securityContext: {}
        serviceAccountName: ${NAME}
        terminationGracePeriodSeconds: 30

- apiVersion: v1
  kind: Service
  metadata:
    name: ${NAME}
  spec:
    ports:
    - name: api
      port: 5000
      protocol: TCP
      targetPort: 5000
    - name: metrics
      port: 8000
      protocol: TCP
      targetPort: 8000
    selector:
      name: ${NAME}
    sessionAffinity: None
    type: ClusterIP
